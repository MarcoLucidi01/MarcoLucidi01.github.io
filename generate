#!/bin/sh

# generate: generates html, index and rss.xml from markdown posts.
#           functions are meant to be executed by make through the makefile
#           which manages dependencies between files. no configuration should go
#           here, everything (e.g. filenames) is passed by make.

set -e

#
# utils
#

dieifempty() {
        if [ -z "$1" ]; then
                echo "error: $2" >&2
                exit 1
        fi
}

getpostmd() {
        echo "$1" | sed 's/\.html$/.md/'
}

getpostdate() {
        postmd="$(getpostmd "$1")"
        sed -n '1p' "$postmd" # date is always on first line in md posts
}

getposttitle() {
        postmd="$(getpostmd "$1")"
        sed -n '3p' "$postmd" # title is always on third line in md posts
}

#
# actions
#

indexhtml() {
        headerhtml="$1"
        indexmd="$2"

        cat "$headerhtml"
        sed -n -e '1 s#^#<title>#' -e '1 s#$#</title>#p' "$indexmd"
        cmark "$indexmd" | sed -e 's/\.md/.html/g' | tac | awk '!f && /^<ul/ { $0="<ul class=\"no-bullet\">"; f=1 } 1' | tac
}

indexmd() {
        rssxml="$1"
        aboutmd="$2"
        shift 2 # rest of arguments are markdown posts filepaths

        cat "$aboutmd"
        printf "\nposts <small>([rss](%s))</small>\n-------------------------------------\n\n" "$rssxml"
        tmp="$(mktemp)"
        for postmd in "$@"; do
                date="$(getpostdate "$postmd")"
                title="$(getposttitle "$postmd")"
                printf "%c %s [%s](%s)\n" "-" "$date" "$title" "$postmd" >> "$tmp"
        done
        sort -r "$tmp"
        rm "$tmp"
}

rssxml() {
        baseurl="$1"
        rssurl="$baseurl/$2"
        generator="$baseurl/$(basename "$0")"
        lang="$3"
        aboutmd="$4"
        shift 4 # rest of arguments are html posts filepaths

        channeltitle="$(sed -n '1p' "$aboutmd")"
        channeldesc="$(sed -n '4p' "$aboutmd")"
        now="$(date --utc --rfc-email)"

        printf '<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <atom:link href="%s" rel="self" type="application/rss+xml"/>
        <title>%s</title>
        <link>%s</link>
        <description>%s</description>
        <language>%s</language>
        <pubDate>%s</pubDate>
        <lastBuildDate>%s</lastBuildDate>
        <generator>%s</generator>
        <docs>https://blogs.law.harvard.edu/tech/rss</docs>
' "$rssurl" "$channeltitle" "$baseurl" "$channeldesc" "$lang" "$now" "$now" "$generator"

        tmp="$(mktemp)"
        for posthtml in "$@"; do
                postdate="$(getpostdate "$posthtml")"
                printf "%s %s\n" "$postdate" "$posthtml" >> "$tmp"
        done
        # aggregators sort items anyway, but I like to have them sorted by date
        # desc even in the xml.
        sort -r -o "$tmp" "$tmp"

        while read -r postdate posthtml; do
                posttitle="$(getposttitle "$posthtml")"
                postlink="$baseurl/$posthtml"
                # TODO https://validator.w3.org/feed/ says the feed is valid,
                # but "description should not contain relative URL references".
                # it doesn't seem to be a problem with newsboat nor thunderbird.
                postdesc="$(awk '!p && /^<h1/ { p=1; next } /^<footer/ { p=0 } p' "$posthtml")"
                postdate="$(echo "$postdate" | xargs date --utc --rfc-email --date)"

                printf '
        <item>
            <title>%s</title>
            <pubDate>%s</pubDate>
            <link>%s</link>
            <guid>%s</guid>
            <source url="%s">%s</source>
            <description><![CDATA[%s]]></description>
        </item>
' "$posttitle" "$postdate" "$postlink" "$postlink" "$rssurl" "$channeltitle" "$postdesc"

        done < "$tmp"
        rm "$tmp"

        printf '
    </channel>
</rss>
'
}

posthtml() {
        headerhtml="$1"
        postmd="$2"
        footerhtml="$3"

        # assume postmd is inside posts/, this means links in header and footer
        # must be relative to that directory. ugly.
        sed 's#href="#href="../#g' "$headerhtml"
        getposttitle "$postmd" | sed -e 's#^#<title>#' -e 's#$#</title>#'
        cmark "$postmd"
        sed 's#href="#href="../#g' "$footerhtml"
}

newpost() {
        postsdir="$1"
        title="$2"
        dieifempty "$title" "missing TITLE=\"\""

        postmd="$postsdir/$(echo "$title" | sed -e 's/\s\+/-/g' -e 's/$/.md/')"
        date="$(date +"%Y-%m-%d")"
        titlelen="$(printf "%s" "$title" | wc -m)"
        heading="$(yes '=' | head -n "$titlelen" | tr -d '\n')"
        printf "%s\n\n%s\n%s\n\n\n" "$date" "$title" "$heading" >> "$postmd"
        vi "$postmd"
}

#
# main
#

action="$1"
dieifempty "$action" "missing action"
shift
case "$action" in "-h" | "--help")
        echo "usage: $0 action [args...]"
        echo "DO NOT USE IT DIRECTLY, USE IT THROUGH MAKE. SEE makefile."
        ;;
*)
        $action "$@"
        ;;
esac
